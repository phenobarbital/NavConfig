# -*- coding: utf-8 -*-
#!/usr/bin/env python3
import os
import sys
from pathlib import Path
import logging
from navconfig import config, BASE_DIR, DEBUG

print('::: LOADING SETTINGS ::: ')
# Debug
LOCAL_DEVELOPMENT = (DEBUG == True and sys.argv[0] == 'run.py')

# PGP Credentials
PGP_KEY_PATH = config.get('pgp_key_path')
PGP_PASSPHRASE = config.get('pgp_passphrase')

# Timezone (For parsedate)
# https://dateparser.readthedocs.io/en/latest/#timezone-and-utc-offset
TIMEZONE = config.get('TIMEZONE', 'US/Eastern')

"""
Databases
"""
# rethinkdb
rt_host = config.get('RT_HOST', fallback='localhost')
rt_port = config.get('RT_PORT', fallback=28015)
rt_name = config.get('RT_NAME')
rt_user = config.get('RT_USER')
rt_password = config.get('RT_PWD')

# POSTGRESQL
PG_USER = config.get('DBUSER')
PG_HOST = config.get('DBHOST', fallback='localhost')
PG_PWD = config.get('DBPWD')
PG_DATABASE = config.get('DBNAME', fallback='navigator')
PG_PORT = config.get('DBPORT', fallback=5432)

database_url = 'postgresql://{user}:{password}@{host}:{port}/{db}'.format(
    user=PG_USER,
    password=PG_PWD,
    host=PG_HOST,
    port=PG_PORT,
    db=PG_DATABASE
)
SQLALCHEMY_DATABASE_URI = database_url
asyncpg_url = 'postgres://{user}:{password}@{host}:{port}/{db}'.format(
    user=PG_USER,
    password=PG_PWD,
    host=PG_HOST,
    port=PG_PORT,
    db=PG_DATABASE
)

### DWH
DWH_USER = config.get('DWHUSER', fallback=PG_USER)
DWH_HOST = config.get('DWHHOST', fallback=PG_HOST)
DWH_PWD = config.get('DWHPWD', fallback=PG_PWD)
DWH_DATABASE = config.get('DWHNAME', fallback=PG_DATABASE)
DWH_PORT = config.get('DWHPORT', fallback=PG_PORT)

dwh_url = 'postgresql://{user}:{password}@{host}:{port}/{db}'.format(
    user=DWH_USER,
    password=DWH_PWD,
    host=DWH_HOST,
    port=DWH_PORT,
    db=DWH_DATABASE
)
adwh_url = 'postgres://{user}:{password}@{host}:{port}/{db}'.format(
    user=DWH_USER,
    password=DWH_PWD,
    host=DWH_HOST,
    port=DWH_PORT,
    db=DWH_DATABASE
)

"""
QuerySet (for QuerySource)
"""

CACHE_HOST = config.get('CACHEHOST', fallback='localhost')
CACHE_PORT = config.get('CACHEPORT', fallback=6379)
CACHE_URL = "redis://{}:{}".format(CACHE_HOST, CACHE_PORT)
REDIS_SESSION_DB = config.get('REDIS_SESSION_DB', fallback=0)

"""
REDIS Session
"""
SESSION_STORAGE = config.get('SESSION_STORAGE', fallback='redis')
SESSION_URL = "redis://{}:{}/{}".format(CACHE_HOST,
                                        CACHE_PORT, REDIS_SESSION_DB)
CACHE_PREFIX = config.get('CACHE_PREFIX', fallback='navigator')
SESSION_PREFIX = '{}_session'.format(CACHE_PREFIX)

# QuerySet
QUERYSET_DB = config.get('QUERYSET_DB', fallback=0)
QUERYSET_REDIS = CACHE_URL+"/" + str(QUERYSET_DB)

"""
 Memcache
"""
MEMCACHE_HOST = config.get('MEMCACHE_HOST', 'localhost')
MEMCACHE_PORT = config.get('MEMCACHE_PORT', 11211)

"""
 Redash System
"""
REDASH_HOST = 'https://widgets.trocglobal.com'
REDASH_API_KEY = config.get('REDASH_API_KEY')

## AMAZON
aws_region = config.get('REGION', section='AWS', fallback='us-east-1')
aws_bucket = config.get('BUCKET', section='AWS',
                        fallback='navigator-static-files-2')
aws_key = config.get('AWS_KEY')
aws_secret = config.get('AWS_SECRET')

"""
Resource Usage
"""
QUERY_API = config.getboolean('QUERY_API', fallback=True)
SCHEDULER = config.getboolean('SCHEDULER', fallback=True)
SERVICES = config.getboolean('SERVICES', fallback=True)
WEBSOCKETS = config.getboolean('WEBSOCKETS', fallback=True)
API_TIMEOUT = 36000  # 10 minutes
